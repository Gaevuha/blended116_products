// src/js/render-function.js

import { fetchProductCategories, fetchAllProducts } from './products-api.js';
import { refs } from './refs.js';
import { cards } from './storage.js';
import { openModal } from './modal.js';
import {
  onProductCardClick,
  showLoadMoreBtn,
  hideLoader,
  showNotFoundMessage,
  hideNotFoundMessage
} from './handlers.js';
import { getCart, addToCart, removeFromCart, isInCart, updateCartCount } from './storage.js';


//–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —Ä–µ–Ω–¥–µ—Ä—É –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏
const listProducts = document.querySelector('.products');
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
export function createMarkupCategories(categories) {
    return categories
        .map(category => {
            return `<li class="categories__item">
   <button class="categories__btn" type="button" data-category="${category}">${category}</button>
 </li>
`
        }).join('');
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
export function createMarkupProducts(products) {
    return products
        .map(product => {
            return `<li class="products__item" data-id="${product.id}">
                  <img class="products__image" src="${product.thumbnail}" alt="${product.title}"/>
                   <p class="products__title">${product.title}</p>
                    <p class="products__brand"><span class="products__brand--bold">Brand: </span>${product.brand}</p>
                    <p class="products__category">Category: ${product.category}</p>
                    <p class="products__price">Price: ${product.price} $</p>
 </li>
`   }).join('');
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
export async function initPage() {
  // –°—Ö–æ–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
  refs.categoriesListEl.classList.add('hidden');
  refs.productsListEl.classList.add('hidden');

  // –°—Ö–æ–≤–∞—Ç–∏ –±–ª–æ–∫ "not-found", —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ä–∞–Ω—ñ—à–µ
  document.querySelector('.not-found').classList.add('is-hidden');


  try {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ API
    const categories = await fetchProductCategories();

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä—à–∏—Ö 12 –∞–±–æ –≤—Å—ñ, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
    const products = await fetchAllProducts();

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const categoriesMarkup = createMarkupCategories(categories);

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    const productsMarkup = createMarkupProducts(products);

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ —Å–ø–∏—Å–∫—ñ–≤
    const categoriesList = document.querySelector('.categories');
    const productsList = document.querySelector('.products');

    // –î–æ–¥–∞—Ç–∏ HTML –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ —Å–ø–∏—Å–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    categoriesList.insertAdjacentHTML('beforeend', categoriesMarkup);

    // –Ø–∫—â–æ –º–∞—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π:
    if (products.length === 0) {
      // –ü–æ–∫–∞–∑–∞—Ç–∏ –±–ª–æ–∫ "No Products Found"
      document.querySelector('.not-found').classList.remove('is-hidden');
    } else {
      // –Ø–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç–∏ —î ‚Äî –≤—Å—Ç–∞–≤–∏—Ç–∏ HTML –¥–æ DOM
      productsList.insertAdjacentHTML('beforeend', productsMarkup);

      // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
      refs.productsListEl.classList.remove('hidden');
    }
    showLoadMoreBtn();// –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "Load more"
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    refs.categoriesListEl.classList.remove('hidden');

    //  –î–æ–¥–∞—Ç–∏ –¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –Ω–∞ –∫–∞—Ä—Ç–∫–∏
    productsList.addEventListener('click', e => {
    const card = e.target.closest('.product-card');
    if (!card) return;

    const id = card.dataset.id;
    if (!id) return;

      openModal(id);
      
});

  } catch (error) {
    // –í–∏–≤–µ—Å—Ç–∏ –ø–æ–º–∏–ª–∫—É —É –∫–æ–Ω—Å–æ–ª—å, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error.message);
  } finally {
    // –£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É ‚Äî —Å—Ö–æ–≤–∞—Ç–∏ —Å–ø—ñ–Ω–µ—Ä
    hideLoader();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
export function clearMarkupProducts() {
    listProducts.innerHTML = '';
}
// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É 'Load more'
export async function addLoadMoreProducts(products) {
    try {
        const products = await fetchAllProducts();
        const markup = createMarkupProducts(products);
        listProducts.insertAdjacentHTML('beforeend', markup);
    } catch (error) {
        console.error('Error fetching products:', error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–∞—Ä—Ç–æ–∫ –∑ localStorage
export async function renderCardsFromStorage() {
    if (cards.length > 0) {
        const markup = createMarkupProducts(cards);
        refs.productsListEl.insertAdjacentHTML('beforeend', markup);
        showLoadMoreBtn();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
export async function renderModalProduct(product) {
  const {
    id,
    images,
    title,
    description,
    tags,
    shippingInformation,
    returnPolicy,
    price,
  } = product;

  //—à—É–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
   const modalProductContainer = refs.modalContentEl.querySelector('.modal-product');
  if (!modalProductContainer) {
    console.warn('Element .modal-product not found');
    return;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ –≤–º—ñ—Å—Ç .modal-product
  modalProductContainer.innerHTML = `
    <img class="modal-product__img" src="${images[0]}" alt="${title}" />
    <div class="modal-product__content">
      <p class="modal-product__title">${title}</p>
      <ul class="modal-product__tags">${tags?.map(tag => `<li>${tag}</li>`).join('')}</ul>
      <p class="modal-product__description">${description}</p>
      <p class="modal-product__shipping-information">Shipping: ${shippingInformation || "Not specified"}</p>
      <p class="modal-product__return-policy">Return Policy: ${returnPolicy || "Not specified"}</p>
      <p class="modal-product__price">Price: ${price}$</p>
      <button class="modal-product__buy-btn" type="button">Buy</button>
    </div>
  `;
  const cartBtn = refs.modalContentEl.querySelector('.modal-product__btn--cart');
  if (!cartBtn) return;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫—É
  const inCart = isInCart(id);
  cartBtn.textContent = inCart ? 'Remove from Cart' : 'Add to Cart';

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
  cartBtn.onclick = () => {
    const cartList = document.querySelector('.products');
  
    if (isInCart(id)) {
      removeFromCart(id);
      cartBtn.textContent = 'Add to Cart';
  
      // üî• –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–∞—Ä—Ç–∫—É –∑ –∫–æ—à–∏–∫–∞ (—è–∫—â–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Cart)
      const productCard = cartList?.querySelector(`.products__item[data-id="${id}"]`);
      if (productCard) productCard.remove();
  
      // üîÅ –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
      const updatedCart = getCart();
      updateCartCount();
      updateSummary(updatedCart);
  
      if (updatedCart.length === 0) {
        showNotFoundMessage();
      }
  
    } else {
      addToCart(product);
      cartBtn.textContent = 'Remove from Cart';
  
      // üõí –†–µ–Ω–¥–µ—Ä–∏–º–æ —Ç–æ–≤–∞—Ä —É —Å–ø–∏—Å–æ–∫, —è–∫—â–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Cart
      if (cartList) {
        const markup = createMarkupProducts([product]);
        cartList.insertAdjacentHTML('beforeend', markup);
      }
  
      updateCartCount();
    }
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π –Ω–∞ –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
export function addCardClickListener() {
  if (refs.productsListEl) {
    refs.productsListEl.addEventListener('click', onProductCardClick);
  } else {
    console.warn('refs.productsListEl –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "No Products Found"
export function renderCartProducts() {
  const cartItems = getCart();
  const list = document.querySelector('.products');

  list.innerHTML = ''; // –æ—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫

  if (cartItems.length === 0) {
    showNotFoundMessage();
    updateSummary(cartItems); // –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω—É–ª—å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    return;
  }

  hideNotFoundMessage();

  const markup = createMarkupProducts(cartItems);
  list.insertAdjacentHTML('beforeend', markup);

  updateSummary(cartItems);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ —É –∫–æ—à–∏–∫—É
export function updateSummary(cartItems) {
const countEl = document.querySelector('[data-count]');
const priceEl = document.querySelector('[data-price]');
const totalCount = cartItems.length;
const totalPrice = cartItems.reduce((sum, item) => sum + item.price, 0);

countEl.textContent = totalCount;
priceEl.textContent = `$${totalPrice.toFixed(2)}`;
}